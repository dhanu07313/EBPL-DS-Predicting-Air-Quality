# -*- coding: utf-8 -*-
"""phase 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14a0syqrxbbEod9Xz9VyI8m0njXMoTz08
"""

# 📦 Install dependencies
!pip install -q pandas scikit-learn matplotlib seaborn

# 🧠 Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import zipfile
import urllib.request
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# 📥 Download and extract dataset
zip_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00360/AirQualityUCI.zip"
zip_path = "AirQualityUCI.zip"
csv_filename = "AirQualityUCI.csv"

urllib.request.urlretrieve(zip_url, zip_path)

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extract(csv_filename)

# 📄 Load CSV and clean columns
df = pd.read_csv(csv_filename, sep=';', decimal=',', low_memory=False)
df = df.iloc[:, :-2]  # Drop last two unnamed columns

# 🕒 Combine Date and Time into datetime
df['Date_Time'] = pd.to_datetime(df['Date'] + ' ' + df['Time'], format="%d/%m/%Y %H.%M.%S", errors='coerce')
df.drop(columns=['Date', 'Time'], inplace=True)

# 🧹 Clean column names
df.columns = [c.strip().replace(" ", "_").replace("(", "").replace(")", "") for c in df.columns]

# 🔍 Check for correct column name
print("📋 Columns in dataset:")
print(df.columns.tolist())

# Replace -200 with NaN and drop rows with NaNs
df.replace(-200, np.nan, inplace=True)
df.dropna(inplace=True)

# 🎯 Set target and features
target = 'NO2GT'  # Should now match corrected column name
features = df.columns.difference(['Date_Time', target])
X = df[features]
y = df[target]

# 🔀 Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 🏗️ Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# 📈 Predict
y_pred = model.predict(X_test)

# 📊 Evaluate
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"\n✅ Mean Squared Error: {mse:.2f}")
print(f"✅ R² Score: {r2:.2f}")

# 📉 Plot
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred, alpha=0.3)
plt.xlabel("Actual NO₂")
plt.ylabel("Predicted NO₂")
plt.title("Actual vs Predicted NO₂ Levels")
plt.grid(True)
plt.show()